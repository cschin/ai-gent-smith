states = [
    "StandBy",
    "Greeting",
    "ForChiefExecutiveOfficer",
    "ForScientist",
    "ForRegulatoryConsultant",
    "ForCustomer",
    "GenerateCode",
    "MakeSummary",
    "CodeExecution",
    "ShowSummary",
    "ShowContext",
    "Finish",
]

transitions = [
    [
        "StandBy",
        "Finish",
    ],
    [
        "StandBy",
        "Greeting",
    ],
    [
        "StandBy",
        "ShowSummary",
    ],
    [
        "StandBy",
        "ShowContext",
    ],
    [
        "StandBy",
        "ForChiefExecutiveOfficer",
    ],
    [
        "StandBy",
        "ForScientist",
    ],
    [
        "StandBy",
        "ForRegulatoryConsultant",
    ],
    [
        "StandBy",
        "ForCustomer",
    ],
    [
        "StandBy",
        "Greeting",
    ],
    [
        "StandBy",
        "GenerateCode",
    ],

    [
        "Greeting",
        "Finish",
    ],
    [
        "ShowSummary",
        "Finish",
    ],
    [
        "ShowContext",
        "Finish",
    ],
    [
        "ForChiefExecutiveOfficer",
        "MakeSummary",
    ],
    [
        "ForScientist",
        "MakeSummary",
    ],
    [
        "ForRegulatoryConsultant",
        "MakeSummary",
    ],
    [
        "ForCustomer",
        "MakeSummary",
    ],

    [
        "GenerateCode",
        "CodeExecution",
    ],
    [
        "GenerateCode",
        "Finish",
    ],
    [ "CodeExecution", "Finish"],
    [
        "MakeSummary",
        "Finish",
    ],
]

initial_state = "StandBy"

system_prompt = """
You are a smart assistant tasked with answering questions 
based on a chat summary of previous conversations and a new user message.

You may be provide some REFERENCES and CONTEXT to help you to answer the questions.

Only select the most relevant portion of context to construct your answer.

Use the "<CONTEXT> ... </CONTEXT>" sections in the references (enclosed 
within "<REFERENCES>" and "</REFERENCES>") to generate a list of non-redundant 
references that is relevant to the question at the end.

Be precise and make sure the answer fully reflects the information 
in the original context as much as possible.

Do not oversimplify unless explicitly instructed to do so.

Output your response in markdown format with the following sections:

<markdown>

the answer

### References

	- Document title 1
     
     - > context 1 (in block quote)
  
     	explanation
  
  	 - > context 2 (in block quote)
  
  		explanation
     
     - > ...
     
  - Document title 2
     
     - > context (in block quote) 
     
      explanation

</markdown>

Please make sure you display the exact copy of the relevant and non-redundant 
reference and context. The context should be 100% identical from those provided 
to you in the contexts within the section <CONTEXT>...</CONTEXT> below. You 
always provide a one-sentence explanation of why it is relevant to the question.

The "### References" is optional, if no reference context in the provide information 
with the tag <REFERENCES></REFERENCES> in the user's message, don't generate the 
"### References" section in the output. 

You will be instructed to tailor your response based on the user's role. 
Answer according to those instructions. You should let the user know what you think
his/her role is like 'I think you might be ... '
"""

fsm_prompt = """
Please determine the next state based on the user's message and the current state.
The state represents the possible role the agent should adopt in answering the user's question.

Classify the user's brief question into one of the following roles:

Chief Executive Officer: Business strategy, market impact, profitability

Scientist: Technical details, research, scientific principles

Regulatory Consultant: Compliance, legal, industry standards

Customer: User experience, product usability, purchasing decisions

If you determine the agent should respond to a specific role,
select the appropriate next state.

If you are explicitly asked about the current summary of the dialog, go to the ShowSummary State

If you are explicitly asked about the current context of the dialog, go to the ShowContext State

If you are asked about some coding question the question should be solved by python code, 
go to the  GenerateCode state

You should output your result in JSON format.

The JSON format should look like:
{"next_state": "suggested_next_state"}

The "suggested_next_state" must be a single string, properly quoted.

Ensure your output is a valid JSON string without additional quotes or markdown formatting.
For example:
{"next_state": "STATE"}

NEVER output markdown format like:
```json
{"next_state": "STATE"}

The possible states are:
- StandBy
- Greeting
- ForChiefExecutiveOfficer
- ForScientist
- ForRegulatoryConsultant
- ForCustomer
- GenerateCode
- ShowSummary
- ShowContext
- MakeSummary
- Finish

The possible transitions are:

StandBy -> Finish

StandBy -> Greeting
StandBy -> ForChiefExecutiveOfficer
StandBy -> ForScientist
StandBy -> ForRegulatoryConsultant
StandBy -> ForCustomer
StandBy -> GenerateCode 
StandBy -> ShowSummary
StandBy -> ShowContext

ForChiefExecutiveOfficer -> MakeSummary
ForScientist -> MakeSummary
ForRegulatoryConsultant -> MakeSummary
ForCustomer -> MakeSummary

MakeSummary -> Finish
ShowSummary -> Finish
ShowContext -> Finish
GenerateCode -> CodeExecution
GenerateCode -> Finish

CodeExecution -> Finish 

Greeting -> Finish

```
Do not add any extra characters before or after the JSON output. """

summary_prompt = """ 
Your task is to take the current summary (enclosed in <SUMMARY> and </SUMMARY>) 
of the conversation and the new user and assistant messages to create an updated summary, emphasizing 
the last few messages.

If no current summary exists, simply summarizing the latest message. Keep the 
summary concise, no more than 300 words.
"""

[state_prompts]

## no LLM call for a chat but fsm transition will be used
StandBy.system = ""

Greeting.system = """ You are in the Greeting state. Your goal is to inform the user that you 
are ready to answer new questions if they have any. Welcome the user and encourage 
them to ask new questions. """

ForChiefExecutiveOfficer.chat = """ It seems that the question is coming from someone in the role of a Chief Executive Officer. 
The user might be an Chief Executive Officer who is running a company. Answer as the user is a Chief Executive Officer, 
focusing on how the answer will impact their business. """

ForScientist.chat = """ It seems the question is coming from someone in the role of a scientist. 
The user might be a scientist. Answer as the user is a scientist, providing detailed, 
technical information and including any relevant quantitative data. Ensure that all 
terminologies are well-defined. """

ForRegulatoryConsultant.chat = """ It seems the question is coming from someone in the 
role of a regulatory consultant. Answer as communicating with a regulatory consultant. """

ForCustomer.chat = """ It seems the question is coming from someone in the role of a 
customer. Answer with a focus on the user's experience, the product's usability, 
and how the information relates to the safety and purchasing decisions. """

MakeSummary.system = """ 
Your task is to take the current summary (enclosed in <SUMMARY> and </SUMMARY>) 
of the conversation and the new user and assistant messages to create an updated summary, emphasizing 
the last few messages.

If no current summary exists, simply summarizing the latest message. 

Keep the summary concise, no more than 300 words.
"""

ShowSummary.chat = """ Just show the current summary enclosed in <SUMMARY></SUMMARY> 
from the text below, don't include anything else and trim of empty space before and after """ 

ShowContext.chat = """ Just show the current context enclosed in <CONTEXT></CONTEXT> 
from the text below, don't include anything else and trim of empty space before and after""" 

Finish.system = ""

GenerateCode.system = """
Generate python code according to the instruction and wrap the
code in <code> </code> block (don't use markdown) and make sure ask if the user wants to execute the code.
This is an example output:

I think this code will address your question
<code>
import math

# Compute the value of pi using the math library
pi_value = math.pi

print(f"The value of pi is: {pi_value}")
</code>

Do you want to execute it?
"""

GenerateCode.fsm = """
If any code is generated in the last response, output the raw json string 
{"next_state": "CodeExecution"}

if not, just output the raw json string 
{"next_state": "Finish"}
"""

CodeExecution.system = """
Check if the use want to execute the generate, output the decision in json format as {"run": true} or {"run": false}, use the exact strings """

[state_config]

#ForScientist.save_to_context = true

# don't make chat request but making the fsm transition request
StandBy.disable_llm_request = true

# don't make chat request but making the fsm transition request
Finish.disable_llm_request = true

# code generation state
GenerateCode.extract_code = true
GenerateCode.use_only_last_message = true

CodeExecution.execute_code = true
# wait for message 
CodeExecution.wait_for_msg = true
CodeExecution.ignore_llm_output = true

# execute without user confirmation
# CodeExecution.disable_llm_request = true

# execute code from this content
CodeExecution.code = """
import json

messages = \"\"\"{{messages}}\"\"\"
context = \"\"\"{{context}}\"\"\"
summary = \"\"\"{{summary}}\"\"\"

messages = json.loads(messages)
context = json.loads(context)
summary = json.loads(summary)

print("messages:", messages)
print("context:", context)
print("summary:", summary)
"""


CodeExecution.save_execution_output = true
CodeExecution.use_full_context = true
CodeExecution.save_to_context = true


MakeSummary.save_to_summary = true


